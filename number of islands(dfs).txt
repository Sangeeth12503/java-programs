class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        
        int count = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        
        // Iterate through each cell in the grid
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                // If the cell is land ('1'), start DFS from that cell
                if (grid[i][j] == '1') {
                    exploreIsland(grid, i, j);
                    count++; // Increment island count
                }
            }
        }
        
        return count;
    }
    
    private void exploreIsland(char[][] grid, int i, int j) {
        int rows = grid.length;
        int cols = grid[0].length;
        
        // Base cases for DFS recursion
        if (i < 0 || j < 0 || i >= rows || j >= cols || grid[i][j] == '0') {
            return; // Out of bounds or water cell
        }
        
        // Mark the current cell as visited
        grid[i][j] = '0';
        
        // Explore all neighboring land cells recursively
        exploreIsland(grid, i + 1, j); // Down
        exploreIsland(grid, i - 1, j); // Up
        exploreIsland(grid, i, j + 1); // Right
        exploreIsland(grid, i, j - 1); // Left
    }
}
